/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//tAxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAATAAAOSAANDQ0NDRoaGhoaKCgoKCg1NTU1NTVDQ0NDQ1BQUFBQXl5eXl5ra2tra2t5eXl5eYaGhoaGlJSUlJShoaGhoaGvr6+vr7y8vLy8ysrKysrX19fX19fl5eXl5fLy8vLy//////8AAAA8TEFNRTMuOTlyAZYAAAAAAAAAABQ4JAYTQgAAOAAADkgjxHT1AAAAAAD/+0DEAAAE6AFL4IQgMUmXKbaegAYCVwYHCH0+GtHNNDZ2jIcWQTOWBE15Bvd/6PT/2fUn////nxuiUSQKum21qcjaSArVAZEQ8Gc3DDV6obGVjfUUECILgoEwuLuWeL1UJ/uYSIRooQZ9ZY8yXF7m6hXvT4n5fveb5tLrSYRJMzkMZy5WUdidpROnIVasgqBStC0QkSAhW1GkAQKGonBuHeJWRwMhPmKzrzq44xYFcnjQzByCbv/7QsQTgA3pY3W49oAJQgmq57SABHDZ1pjmKYmBisyc3QYbxjEmZpaKHlMinCmUKKO/plOyBm9bLo3+cPlR7dlsr9DrpUZigYqOf//6lJqTRWymV////m6RubcVaUAEGRIlczMozYAxoByoXAkOKbLlizo00OPNZgKX0gLRg+mBssXKM6HLTZxkWXAQsLQqzCpkNIbnlAwPARo1ZueMfbYefsgXbZhIBHpvI3/2ugBFgABSycgz6//7QsQEgAokSUstJYcBRIvpcaYYZE1WC29mWWHBpcMyC4E9Q6n0ByIW9fnOa6C7EOAQJgVIesDdcHCblkAsZAryQWEoFInBUWEwbAQTQ8LCzAM1q/Y7q9GY/7AIDgMtVlZVRCwPBU2W/wKUAYHRsHtzIuFqKSQ4FLm8JJbX787MvHhKq3fJ2hoiTeCrEhcJLDpheK4CB3phpzAV2rVd7sdvqCglER6tJUsOu9qtmioBtgABVM6Dc//7QsQEAAnogT0tJQcBRJFnpbMN2CoVAU0N03xbWUhkQjZEmkmhMnGu5VwXLbKN6bsxXc2u0uqgcbsiNH8q4zKUoDErizB5Aejabcx2kXuyc7O0ZGj+z/6mmLG7gA9AAJHCMbQ4Ns1V3HNdiVOxehcSnH/jzpxa4UnaFoEn8BS1ZcMB7lI4MJPGBuRHk5zJjmdNwQtNQTVAu4bXi+zJ0XLoWKFQipy7ooxmxDqxlVHbdrbHHIkwPv/7QsQEgAoot1+sMGmxRgjntbeYMOb1Sa7oafRtLzteZMCx0gj4UVJ3dhhmLcczsxi6v7ZqMZ5dxLkKdMr/P/uTicp1RI8mdOy2BiLMMCfFttqUr1uA2n3rq0CzJAARKsoIEpt0BosCQMeZ+k9YTEa0OVKNZ1Q3J5PPFKUrmQD40x3YiathUigFColWsvJGnCVKRVaGrIC5w8Gf0i67HFsXF1Lp33k85boKiWs2eFENu6SNt9tCtf/7QsQEAAnA+VGMMEVxSY8odYYMrDSg5DU1bdrR2CsyA8BFRpSOzoSSqTYj4MYXZnLZ5UUIeD5Q1sO6KilQlysYvSj2Oj3391EU2FqY/2/T37HmBkRzUHldvQgF3/WRl2yNwI+iKbf8Zo7QeDsPx0OwNC6LXKHZWhqtUg5dY3qRuUC7E/Q0PKBDQ5GhhHWBphxpEcIqTRVwfYOM0h66bGSIxjKkhqizSdQu96e1Cgn+UCavD+TM1f/7QsQEgAlAXTMssMMBHQ6mcZYMsIEgK+BiUQpiH8zMh4Lo5xBSia5snRrI7GReMWjE90pbeWChEbYLIiYIpSHxIRDThR6Z1rKqjut9l4aAdKPdMJ/pACliaJf/gbZJVjVCvVnsbD0qIw7PR9Gs5hgLzJjLyEy/kLqT32WkYXOHywnCdPM8WIbCLwiwDkGGSxtGxK37ZsZLY6i1XuoqAVjhRAN3gAvGakPrpEAlgxDxcDMtmKk7Wf/7QMQMgAjMRy+MMEPBH5JlJaSMuAIUEGtfkLuQ7ptAAIOpEI4ChIXIDHvAmPFQ6HnBUao2yZdiNAbJRbl6NyX5XYAt7K10geoAYYmnQNCXWaU0CyDUZh5AydIDTL7es5CzTLaXDcBJj0vDLyLqFK2ssClWZ1b1lCIgYbJ1pYmRQgkNsctJ6jbq+uoSW5Qm+A6IDAwQNu29pw5C0amsX6hjHAAC6igOUby6rffYnF/W+efkRKWX//tCxBWACQyRKS4Yq8EflSTlwyE4qqWhvM9exAVDzzMeiSKtMvQ8zemWMBwq23fxVCUgUzMS/IHcB6QgBcDHGGPTCJZI4CdcrIwYkGWs6y+xaRpDf2JjjEpLxrlvd6Zfq4upda/gzBWQdf90g+Jz0h5qUB4lHbKlVfsqHr+oNRRIA/ADSJTMo0h4bXFSR1QnUJDljBP8agTu2auMbexsgk0cSRKbmLEwaR9Vwg7xCGLwdnV+0s6Q//tCxB4ACPSxKU2kZYEWEeb1liA0OBUMreaK7Nyugr9YVtn2+9ttTAJ4YgA24B3EE/eW7Zszgz1r6k41SGeokhB4DBHe3l19yfiRh8XfdmlRadxaWIgfTpBQQQbATUPKL6f9fu1VVR7Lttv9vtG6RpdpFZKqFYyVD2w43VaLfc1UF3A3VpBUw7gioGWOSe5Kapm9XDg+zJ5+wvbXJSo/YHiiUd5qdZ//Rp///1iJpJNTv4GAYW0F//tCxCgACLSPOawZA2D5k2VxgZV8oUlimo62Nbml2NdSafS1NadCiR0tVCgXzU7bYR0oa+0rsEkaZkGINAWhg39dH///xb/u6RZZNbPdtaAKIWcQGdZ6jzYlAgEzYz+/mgol2c07oJwoPOWup4l24GRYFzbL0kRz3kd3//////d6hJG5Lbbc2wIVtoAMJ12IUtRqshz735Z7R8xhRKscELgoo2KJNiEs8eJZbZ99OzW51H////6F//tCxDcABwhvNaewYGDVCyY1hgwUEbTct11zgEBFuDnHrHDNEwaU0G8i5PybIkqA9g6HspigBWdPz//d/////6wiHGBBHGImAPjmY1REyyMsv+/6yimzh5eq1v/1ooo0df/+7WoFIEQDSgMWDArrjstVlX9lCAaON//W////b2aP///6wQYik2tErA0yCCuWbJITfAam3SXTO/b/+So6Ncv//1/6P/6KAAAkBINuMXkjY+yKE3cM//tCxFEABXhbMawEY+COiSV1gIh89iqbKdepVvWxmMfb/2fpt/+jv+m7/SCQxG3ErDIBAcmJ1UfGNbY6hW3dlksZrX1/7/9//////9X6agEG5GA1GEUALX0jFb3HbfoJ2bEU+v/930/9caYAEANXkcZkzvN8OvZRSDyJZtAICeBYCWScxxUPVHXKFudL6gM3KljymV0WBVSzqxvRQNTJWWNdYPAIFTvNjxqbxcquGk2LYRpMQU1F//tCxHoAA+gJLaeIACCNASVwkQQGMy45OS41qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqBWZmZ3gMNgMB2mCzXvQ5dT/Uz1/T///gYeo2wemz////69V280AGaIqg0abT3bDiWdMpJFacq5J4OuY69kJfcjqPd2MbdKrApXPXVeqs654SnaKhw724wClvW1NddUxBTUVVVVNdgAAKBRBKSeOHPK//1u//LT3///tAxKmABKwXE0yYQICLgKR1AIgC//U////yq//0RkEEEEqZaMWg8YE+2C/S42abQMjJm9QxkdLt8v9oyxqJgPYxWTciVWSnjX9XH+rZq8lef+mlVjj6mzIq5FU0OSukWytZr+2esuzqFmmrKua8pSuMpbGKubFV2oUmutPaRNRgmGSyTxS5pVQVKpuRNdbUNLb49WF1SYlEsFcf+kxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVX/+0LE1YADiAcjpgRAMR0DXtmkhFhVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUAUUxBTUUzLjk5LjVVVVVVVVVVVVVVVVVVVVX/+0LE3YAErAMt4IRAMOAA37wgiARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+0LE/IADpAEFoIRAMfutlLGRpT1VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+0LEr4PAOAIACAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVU=';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();

// safe way to unlock
let unlocked = false;
const safeUnlock = () => {
  if ( !unlocked ) {
    unlock();
    unlocked = true;
  }
};

const onDecodeSuccess = decodedAudio => {
  if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
    wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
    safeUnlock();
  }
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 1, phetAudioContext.sampleRate ) );
  safeUnlock();
};
const decodePromise = phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
if ( decodePromise ) {
  decodePromise
    .then( decodedAudio => {
      if ( wrappedAudioBuffer.audioBufferProperty.value === null ) {
        wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
        safeUnlock();
      }
    } )
    .catch( e => {
      console.warn( 'promise rejection caught for audio decode, error = ' + e );
      safeUnlock();
    } );
}
export default wrappedAudioBuffer;